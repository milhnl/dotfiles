#!/usr/bin/env sh
#winvm - manage windows vm
set -eu

exists() { command -v "$1" >/dev/null 2>&1; }
daemon() ( exec "$@" >/dev/null 2>&1 & )

get_unused_id() (
    cd "$XDG_DATA_HOME/winvm" || { echo 0; return; }
    set -- 0 $(seq $(( $(cat */id 2>/dev/null | sort | tail -n1) + 1 )) )
    for i; do
        if ! cat */id 2>/dev/null| grep -q "^$i$"; then echo "$i"; return; fi
    done
)

get_vm_id() { #1:vm 2?:host
    if [ "$#" -eq 1 ] || [ -z "${2:-}" ]; then
        cat "$XDG_DATA_HOME/winvm/$1/id" || return 1
    else
        ssh "$2" cat '"${XDG_DATA_HOME:-$HOME/.local/share}/winvm/'"$1"'/id"' \
            || return 1
    fi
}

get_port() { #1:id 2:port
    echo $(( 10000 + 1000 * $1 + $2 ))
}

ssh_judo() {
    OPTIND=1; unset script sshop envvar
    while getopts 's:o:e:' OPT "$@"; do
        case "$OPT" in
        s) script="$OPTARG" ;;
        o) sshop="${sshop+$sshop }'$(echo "-o$OPTARG"|sed s/\'/\'\\\'\'/g)'" ;;
        e) envvar="${envvar+$envvar }'$(echo "$OPTARG"|sed s/\'/\'\\\'\'/g)'";;
        esac
    done
    shift $(( $OPTIND - 1 ))
    eval "set -- ${sshop-} \"\$@\""
    tar -chf/dev/stdout "$script"/* \
        | ssh "$@" \
            "tar -xf/dev/stdin; \
                env ${envvar:-} sh \"$script/script\" </dev/null; \
                rm -r \"$script\""
}

install_deps() {
    sudo pacman -q --noconfirm -S --needed base-devel vagrant virtualbox \
        ebtables dnsmasq net-tools virtualbox-host-modules-arch linux-headers
    sudo modprobe vboxdrv
    mkdir -p "$XDG_DATA_HOME/vboxvms"
    vboxmanage setproperty machinefolder "$XDG_DATA_HOME/vboxvms/"
}

provision() { #1:name
    install_deps
    HOST_ID="$(get_unused_id)"
    HOST_RDP_PORT="$(get_port "$HOST_ID" 389)"
    HOST_SSH_PORT="$(get_port "$HOST_ID" 22)"
    HOST_WSSH_PORT="$(get_port "$HOST_ID" 23)"

    mkdir -p "$XDG_DATA_HOME/winvm/$1"
    cd "$XDG_DATA_HOME/winvm/$1"
    echo "$HOST_ID" >id
    <"$XDG_CONFIG_HOME/winvm/Vagrantfile" \
        sed \
            -e "s|\\\$VM_NAME|$1|" \
            -e "s|\\\$HOST_WSSH_PORT|$HOST_WSSH_PORT|" \
            -e "s|\\\$HOST_SSH_PORT|$HOST_SSH_PORT|" \
            -e "s|\\\$HOST_RDP_PORT|$HOST_RDP_PORT|" \
        >"Vagrantfile"
    <"$XDG_CONFIG_HOME/winvm/ssh_config" \
        sed \
            -e "s|\\\$VM_NAME|$1|" \
            -e "s|\\\$HOST_WSSH_PORT|$HOST_WSSH_PORT|" \
            -e "s|\\\$HOST_SSH_PORT|$HOST_SSH_PORT|" \
            -e "s|\\\$XDG_DATA_HOME|$XDG_DATA_HOME|" \
        >"ssh_config"

    <"$XDG_CONFIG_HOME/winvm/provision.ps1" \
        sed \
            -e "s|\\\$HOSTNAME|$1|" \
            -e "s|\\\$PUBKEY|$(ssh-add -L | head -n 1)|" \
        >"provision.ps1"

    vagrant up --provider=virtualbox --provision
    vagrant halt
    vagrant up --provider=virtualbox --provision

    {
        ssh-keyscan -H4p "$HOST_SSH_PORT" localhost
        ssh-keyscan -H4p "$HOST_WSSH_PORT" localhost
    } >"$XDG_DATA_HOME/winvm/$1/known_hosts"
}

winvm() {
    VM_NAME=default
    while getopts 'h:v:' OPT "$@"; do
        case "$OPT" in
        h) HOST_NAME="$OPTARG" ;;
        v) VM_NAME="$OPTARG" ;;
        esac
    done
    shift "$(( $OPTIND - 1 ))"
    VM_ID="$(get_vm_id "$VM_NAME" "${HOST_NAME:-}" || [ "$1" = provision ])"

    if [ "$1" = global-status ]; then
        vagrant global-status \
            | sed '1d;/^--*$/d;/^ $/,$d;s/  */\t/g' \
            | while read -r LINE; do
                printf '%s\t%s\n' \
                    "$(cat "$(echo "$LINE" | cut -f5)/id")" "$LINE"
            done \
            | sed "s|$XDG_DATA_HOME|\\\$XDG_DATA_HOME|" \
            | cut -f1,2,3,5,6 \
            | sort
    elif [ "$1" = forward ]; then
        ssh "$HOST_NAME" -fNT \
            -L "$(get_port "$VM_ID" 389):localhost:$(get_port "$VM_ID" 389)" \
            -L "$(get_port "$VM_ID" 22):localhost:$(get_port "$VM_ID" 22)" \
            -L "$(get_port "$VM_ID" 23):localhost:$(get_port "$VM_ID" 23):"
    elif [ "$1" = ssh ]; then
        shift;
        ssh -F"$XDG_DATA_HOME/winvm/$VM_NAME/ssh_config" "$VM_NAME" "$@"
    elif [ "$1" = pwsh ]; then
        shift;
        ssh -tF"$XDG_DATA_HOME/winvm/$VM_NAME/ssh_config" "$VM_NAME" \
            powershell.exe -NoLogo "$@"
    elif [ "$1" = wssh ]; then
        shift;
        ssh -F"$XDG_DATA_HOME/winvm/$VM_NAME/ssh_config" "${VM_NAME}_wsl" "$@"
    elif [ "$1" = rdp ]; then
        case "$(uname -s)" in
        Darwin)
            set -- "$XDG_CACHE_HOME/$1.rdp"
            printf "username:s:%s\r\nfull address:s:localhost:%s\r\n" \
                "WINVM\\vagrant" "$(get_port "$VM_ID" 389)" >"$1"
            open -a "Microsoft Remote Desktop" "$1"
        ;;
        Linux)
            if exists rdesktop; then
                echo yes | daemon rdesktop localhost -u vagrant -p vagrant -K \
                    -T winvm  -g 1920x1102 -r clipboard:PRIMARYCLIPBOARD
            elif exists xfreerdp; then
                daemon xfreerdp +sec-tls /cert-ignore /v:localhost /p:3389
                    /u:vagrant /p:vagrant /kbd:0x00010409 /dynamic-resolution
            else
                printf "error: no RDP app found. Install rdesktop/xfreerdp" >&2
                exit 1
            fi
        ;;
        esac
    elif [ "$1" = provision ]; then
        provision "$VM_NAME"
    elif [ "$1" = destroy ]; then
        cd "$XDG_DATA_HOME/winvm/$VM_NAME"
        vagrant destroy
        rm -r "$XDG_DATA_HOME/winvm/$VM_NAME"
    elif vagrant list-commands | sed '1,3d;s/ .*//' | grep -qx "$1"; then
        cd "$XDG_DATA_HOME/winvm/$VM_NAME"
        vagrant "$@"
    else
        cd "$XDG_DATA_HOME/winvm/$VM_NAME"
        "$@"
    fi
}

winvm "$@"
