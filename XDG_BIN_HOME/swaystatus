#!/usr/bin/env sh
#swaystatus - sway bar status line
set -eu

daemon() ( exec "$@" >/dev/null 2>&1 & )
exists() { command -v "$1" >/dev/null 2>&1; }
fnmatch() { case "$2" in $1) return 0 ;; *) return 1 ;; esac ; }

sleep_pid() {
    sleep "$1"&
    echo "$!" >"$2"
    wait "$!" ||:
}

winvms() {
    command -v vagrant >/dev/null 2>&1 || return
    pgrep VBoxHeadless >/dev/null 2>&1 || style=" foreground=\\\"$BARDIM\\\""
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "name": "airplay",
        "markup": "pango",
        "full_text": "<span'"${style:-}"'></span>"
      },'
}

airplay() {
    command -v shairport-sync >/dev/null 2>&1 || return
    pgrep shairport-sync >/dev/null 2>&1 || style=" foreground=\\\"$BARDIM\\\""
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "name": "airplay",
        "markup": "pango",
        "full_text": "<span'"${style:-}"'>󰲷</span>"
      },'
}

caffeinate() {
    if pgrep caffeinated >/dev/null 2>&1; then
        style=""
        ICON="󰒳"
    else
        style=" foreground=\\\"$BARDIM\\\""
        ICON="󰒲"
    fi
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "name": "caffeinate",
        "markup": "pango",
        "full_text": "<span'"${style:-}"'>'"$ICON"'</span>"
      },'
}

np() {
    NP="$(ump current 2>/dev/null)"
    if [ -z "$NP" ] && exists playerctl; then
        NP="$(playerctl metadata -f '{{artist}} – {{title}}')"
        fnmatch "*? – ?*" "$NP" || return
    fi
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "markup": "pango",
        "full_text": "'"$(echo "$NP" | sed 's/"/\\"/g')"'"
      },'
}

wifi() {
    [ -e /sys/class/net/*/wireless ] || return
    apinfo | {
        IFS="$(printf '\t')" read -r eh snr chan ssid
        if [ -n "$ssid" ]; then
            ICON="󰖩"
            TEXT="   <span foreground=\\\"$BARDIM\\\">$ssid</span>"
        else
            ICON="󰖪"
            TEXT=""
        fi
        echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "markup": "pango",
        "short_text": "'"$ICON"'",
        "full_text": "'"$ICON$TEXT"'"
      },'
    }
}

battery() {
    for sys in /sys/class/power_supply/*; do
        <"$sys/type" read type; [ "$type" = Battery ] || continue
        [ -e "$sys/capacity" ] && <"$sys/capacity" read charge || continue
        ! [ -e "$sys/scope" ] || <"$sys/scope" ! grep -qxF Device || continue
        <"$sys/status" read status
        case "$status" in
        Charging) icon="  "; state="<span>";;
        Unknown|"Not charging")
            icon="  ";
            state="<span foreground=\\\"$BARDIM\\\">"
            ;;
        Full) icon="    "; state="<span foreground=\\\"$BARDIM\\\">";;
        Discharging)
            if [ "$charge" -lt 20 ]; then icon="    ";
            elif [ "$charge" -lt 40 ]; then icon="    ";
            elif [ "$charge" -lt 60 ]; then icon="    ";
            elif [ "$charge" -lt 80 ]; then icon="    ";
            else icon="    "; fi
            state="<span>"
            ;;
        esac
        echo '
          '"$SPACER"'
          {
            '"$DEFAULTS"'
            "markup": "pango",
            '"$( [ "$charge" -lt 15 ] && echo '"urgent": true,')"'
            "full_text": " '"$icon$state$charge"'</span> "
          },'
    done
}

date_time() {
    DATE="$(date '+%Y-%m-%d')"
    TIME="$(date '+%R')"
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "markup": "pango",
        "full_text": "'"$DATE"'  <span weight=\"bold\">'"$TIME"'</span>"
      },'
}

lock() {
    pgrep -u "$(whoami)" "^swaylock$" >/dev/null 2>&1 || return
    echo '
      '"$SPACER"'
      {
        '"$DEFAULTS"'
        "full_text": "   "
      },'
}

output_bar_json() {
    echo '['
    while true; do
        echo '[
          '"$(winvms)"'
          '"$(airplay)"'
          '"$(caffeinate)"'
          '"$(np)"'
          '"$(wifi)"'
          '"$(battery)"'
          '"$(date_time)"'
          '"$(lock)"'
        ],'
        if (grep -q Discharging /sys/class/power_supply/*/status) \
                2>/dev/null; then
            sleep_pid 60 "$PIDFILE";
        else
            sleep_pid 3 "$PIDFILE";
        fi
    done
    echo ']' #eh
}

handle_bar_events() {
    while read LINE; do
        [ "$LINE" != '[' ] || continue
        case "$(echo "$LINE" | sed 's/^,//' | jq -r .name)" in
        airplay)
            if ps -u "$USER" -Aocomm= | grep -qxE "shairport-sync"; then \
                killall shairport-sync nqptp ||:
            else
                ! exists nqptp || daemon sudo nqptp
                if ps -u "$USER" -Aocomm=|grep -qxE "pipewire|pulseaudio";then\
                    daemon shairport-sync -o pa
                else
                    daemon shairport-sync
                fi
            fi
            [ -e "$PIDFILE" ] && kill "$(cat "$PIDFILE")" ||:
            ;;
        caffeinate)
            if ps -u "$USER" -Aocomm= | grep -qxE "caffeinated"; then \
                killall caffeinated
            else
                daemon caffeinated
            fi
            [ -e "$PIDFILE" ] && kill "$(cat "$PIDFILE")" ||:
            ;;
        esac
    done
}

swaystatus() {
    PIDFILE="$XDG_RUNTIME_DIR/swaystatus"
    case "${1-}" in
    update)
        kill "$(cat "$PIDFILE")"
        ;;
    "")
        BARDIM='#999999cc'
        DEFAULTS='"separator":false,"separator_block_width":0,'
        SPACER='{'"$DEFAULTS"'"full_text":"     "},'
        echo '{ "version": 1, "click_events": true }'
        (output_bar_json&)
        handle_bar_events
        ;;
    esac
}

swaystatus "$@"
