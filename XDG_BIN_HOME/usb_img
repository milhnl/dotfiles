#!/usr/bin/env sh
#usb_img - create live usb
set -eux

exists() { command -v "$1" >/dev/null 2>&1; }
die() { printf '%s\n' "$*" >&2; exit 1; }
device_of() { df -P "$1" | awk 'END { print $1 }'; }
to_argv() ( set +x; while read -r LINE; do set -- "$@" "$LINE"; done; "$@"; )

clean() {
    sync
    sudo umount "$(device_of "$ROOT/boot")" "$(device_of "$ROOT")"
    sudo rmdir "$ROOT" 2>/dev/null
    ! losetup --list | grep -q "$DEVICE" || sudo losetup -d "$DEVICE"
}

create_root() {
    exists mkfs.vfat || die "error: install mkfs.vfat"
    exists mkfs.ext4 || die "error: install mkfs.ext4"

    sudo sgdisk -zo "$1"
    sudo sgdisk -n 1:0:200M -t 1:ef00 -A 2:set:2 "$1"
    if [ "$TARGET" = xps13 ]; then
        sudo sgdisk -n 2:+0:-16G -t 2:8304 "$1"
        sudo sgdisk -N 3 -t 3:8200 "$1"
    else
        sudo sgdisk -N 2 -t 2:8304 "$1"
    fi
    sync
    sudo blockdev --rereadpt -v "$1" || sudo partprobe "$1"
    (
        set -- $(lsblk -lnoNAME "$1" | sort | sed '1d;s|^|/dev/|')
        yes | sudo mkfs.ext4 $2 && sudo mount $2 "$ROOT"
        cd "$ROOT"
        yes | sudo mkfs.vfat $1 && sudo mkdir -p boot && sudo mount $1 boot
        [ -z "${3:-}" ] || { sudo mkswap -L hibernate "$3"; }
    )
}

usb_img() { #1: path
    ROOT="$(mktemp -d)"
    DEVICE="$1"; trap clean EXIT;
    TARGET="${TARGET:-server}"
    [ -n "${TARGET:-}" ] || case "$TARGET" in
    xps13) echo fenua;;
    usb) echo io;;
    *) die "Specify a HOSTNAME or TARGET";;
    esac
    create_root "$1"
    if [ "$TARGET" = usb ]; then
        sudo pacman --needed --noconfirm -S archiso
        </usr/share/archiso/configs/releng/packages.x86_64 \
            grep -vE '^(#|grml-zsh-config)' \
            | to_argv sudo pacstrap "$ROOT"
    else
        sudo pacstrap "$ROOT" base linux linux-firmware arch-install-scripts
    fi
    sudo cp -rL --preserve=mode "$PREFIX/src/roles" "$ROOT/usr/local/src"
    sudo arch-chroot "$ROOT" sh -euc '
        cd /usr/local/src/roles;
        export CHROOT=true;
        export HOSTNAME='"$HOSTNAME"';
        export TARGET='"$TARGET"';
        ./install_arch
        ./init
        printf "1234\\n1234\\n" | passwd
        usermod -aG video mil
   '
    sudo arch-chroot "$ROOT" sudo -u mil sh -euc '
        cd /usr/local/src/roles;
        ./home
        aur_install() (
            sudo pacman --needed --noconfirm -S base-devel
            cd /tmp
            curl -L "https://aur.archlinux.org/cgit/aur.git/snapshot/`:\
                    `$1.tar.gz" | tar -xz
            cd "$1"
            makepkg -si --noconfirm --needed
        )
        aur_install b43-firmware
    '
}

usb_img "$@"
