#!/usr/bin/env sh
set -eu

die() { if [ "$#" -gt 0 ]; then printf "%s\n" "$*" >&2; fi && exit 1; }

tty_enter_normal_mode() {
    tty="$(stty -g 2>/dev/null)" || die "ERROR: Terminal can not turn off echo"
    eval "tty_exit_normal_mode() { set -- $?; stty '$tty'; exit \$1; }"
    trap 'tty_exit_normal_mode' EXIT INT TERM
    stty -echo -icanon || die "ERROR: Terminal can not turn off echo"
}

tty_exit_normal_mode() {
    true
}

tty_read_one_character() {
    eval "$1="
    while
        set -- "$1" "$(dd bs=1 count=1 2>/dev/null && printf =)"
        set -- "$1" "${2%=}"
        [ -n "$2" ] || break
        eval "$1=\"\${$1}\$2\""
        [ "$(eval 'printf %s "${'"$1"'}"' | wc -m)" -eq 0 ]
    do
        continue
    done
}

display() { #1 min max value
    awk -v min="$1" -v max="$2" -v value="$3" -v width="$(tput cols)" \
        'BEGIN {
            fill = sprintf("%d", value / max * width)
            block=sprintf("%" fill "s","");
            gsub(/ /, "#", block);
            space=sprintf("%" width - fill "s","");
            #gsub(/ /, ".", space);
            printf("%s%s\r", block, space)
        }' >&2
}

slider() ( #1 min max step current callback
    tty_enter_normal_mode
    display "$1" "$2" "$4"
    while tty_read_one_character REPLY; do
        case "$REPLY" in
        h) set -- "$1" "$2" "$3" "$(($4 - $3))" "$5" ;;
        l) set -- "$1" "$2" "$3" "$(($4 + $3))" "$5" ;;
        q) break ;;
        esac
        [ "$4" -le "$2" ] || set -- "$1" "$2" "$3" "$2" "$5"
        [ "$4" -gt "$1" ] || set -- "$1" "$2" "$3" "$1" "$5"
        display "$1" "$2" "$4"
        eval "$5"
    done

    printf '\n' >/dev/stderr
    echo "$4"
)

brightness() {
    slider 0 100 10 \
        "$(ddcutil getvcp 0x10 \
            | sed 's/.*current value =\s*\([0-9]*\).*/\1/')" \
        'ddcutil setvcp 0x10 "$4" 2>/dev/null' >/dev/null
}

brightness "$@"
