#!/usr/bin/env sh
#swaystatus - sway bar status line
set -eu

daemon() ( exec "$@" >/dev/null 2>&1 & )

airplay() {
    pgrep shairport-sync >/dev/null 2>&1 || style=" foreground=\\\"$BARDIM\\\""
    echo '
      {
        "name": "airplay",
        "markup": "pango",
        "full_text": "<span'"${style:-}"'></span>",
        "separator": false,
        "separator_block_width": '"$BLOCK_WIDTH"'
      },'
}

np() {
    NP="$(ump current 2>/dev/null)"
    [ "$NP" != null ] || return
    echo '
      {
        "markup": "pango",
        "full_text": "'"$(echo "$NP" | sed 's/"/\\"/g')"'",
        "separator": false,
        "separator_block_width": '"$BLOCK_WIDTH"'
      },'
}

wifi() {
    [ -e /sys/class/net/*/wireless ] || return
    apinfo | {
        IFS="$(printf '\t')" read -r eh snr chan ssid
        if [ -n "$ssid" ]; then
            ICON="直"
            TEXT="  <span foreground=\\\"$BARDIM\\\">$ssid</span>"
        else
            ICON="睊"
            TEXT=""
        fi
        echo '
      {
        "markup": "pango",
        "full_text": "'"$ICON$TEXT"'",
        "short_text": "'"$ICON"'",
        "separator": false,
        "separator_block_width": '"$BLOCK_WIDTH"'
      },'
    }
}

battery() {
    for sys in /sys/class/power_supply/*; do
        <"$sys/type" read type; [ "$type" = Battery ] || continue
        [ -e "$sys/capacity" ] && <"$sys/capacity" read charge || continue
        <"$sys/status" read status
        case "$status" in
        Charging) icon=""; state="<span>";;
        Unknown) icon=""; state="<span foreground=\\\"$BARDIM\\\">";;
        Discharging)
            if [ "$charge" -lt 20 ]; then icon="";
            elif [ "$charge" -lt 40 ]; then icon="";
            elif [ "$charge" -lt 60 ]; then icon="";
            elif [ "$charge" -lt 80 ]; then icon="";
            else icon=""; fi
            state="<span>"
            ;;
        esac
        echo '
          {
            "markup": "pango",
            '"$( [ "$charge" -lt 15 ] && echo '"urgent": true,')"'
            "full_text": " '"$icon  $state$charge"'</span> ",
            "separator": false,
            "separator_block_width": '"$BLOCK_WIDTH"'
          },'
    done
}

lock() {
    pgrep -u "$(whoami)" "^swaylock$" >/dev/null 2>&1 || return
    echo '
      {
        "full_text": "   "
      },'
}

output_bar_json() {
    echo '['
    while true; do
        DATE="$(date '+%Y-%m-%d')"
        TIME="$(date '+%R')"
        echo '[
          '"$(airplay)"'
          '"$(np)"'
          '"$(wifi)"'
          '"$(battery)"'
          {
            "markup": "pango",
            "full_text": "'"$DATE"'  <span weight=\"bold\">'"$TIME"'</span>",
            "separator": false,
            "separator_block_width": '"$BLOCK_WIDTH"'
          },
          '"$(lock)"'
        ],'
        if (grep -q Discharging /sys/class/power_supply/*/status) \
                2>/dev/null; then
            sleep 60;
        else
            sleep 3;
        fi
    done
    echo ']' #eh
}

handle_bar_events() {
    while read LINE; do
        [ "$LINE" != '[' ] || continue
        case "$(echo $LINE | jq -r .name)" in
        airplay)
            if ps -u "$USER" -Aocomm= | grep -qxE "shairport-sync"; then \
                killall shairport-sync
            elif ps -u "$USER" -Aocomm= | grep -qxE "pipewire|pulseaudio";then\
                daemon shairport-sync -o pa
            else
                daemon shairport-sync
            fi
            ;;
        esac
    done
}

swaystatus() {
    BARDIM='#999999cc'
    BLOCK_WIDTH="$(( 16 * $(swaymsg -t get_outputs | jq 'map(.scale)|min') ))"
    echo '{ "version": 1, "click_events": true }'
    (output_bar_json&)
    handle_bar_events
}

swaystatus "$@"
